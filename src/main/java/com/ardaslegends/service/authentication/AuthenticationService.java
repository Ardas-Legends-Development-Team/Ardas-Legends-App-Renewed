package com.ardaslegends.service.authentication;

import com.ardaslegends.service.dto.authentication.DiscordUserDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Objects;

/**
 * Service class for handling authentication with Discord.
 * This class provides methods to generate Discord tokens and retrieve Discord user information.
 */
@RequiredArgsConstructor
@Service
@Slf4j
public class AuthenticationService {

    private final RestTemplate restTemplate;

    @Value("${ardaslegends.auth.client_id}")
    private String clientId;

    @Value("${ardaslegends.auth.client_secret}")
    private String clientSecret;

    @Value("${ardaslegends.auth.redirect_uri}")
    private String redirectUri;

    @Value("${ardaslegends.auth.auth_url}")
    private String authUrl;

    /**
     * Generates a Discord token from the provided access code by calling the Discord API.
     *
     * @param discordAccessCode The access code received from the frontend when the user authenticates via Discord.
     * @return The Discord token generated by the Discord API.
     * @throws RuntimeException if an error occurs while generating the token.
     */
    public DiscordTokenResponse generateDiscordTokenFromCode(String discordAccessCode) {
        try {
            URL url = new URL(authUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();

            // Setting the request method to POST
            con.setRequestMethod("POST");

            // Setting the request headers
            con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

            // Forming the request body
            String urlParameters = "client_id=" + clientId
                    + "&client_secret=" + clientSecret
                    + "&grant_type=authorization_code"
                    + "&code=" + discordAccessCode
                    + "&redirect_uri=" + redirectUri
                    + "&scope=identify guilds";

            // Enabling the input and output streams
            con.setDoOutput(true);
            try (OutputStream os = con.getOutputStream()) {
                byte[] input = urlParameters.getBytes(StandardCharsets.UTF_8);
                os.write(input, 0, input.length);
            }

            // Getting the response code
            int responseCode = con.getResponseCode();
            log.debug("Response Code: {}", responseCode);

            // Reading the response
            try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))) {
                String inputLine;
                StringBuilder response = new StringBuilder();
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                // Parsing the response
                log.debug("DISCORD Response: {}", response);
                return new ObjectMapper().readValue(response.toString(), DiscordTokenResponse.class);
            }

        } catch (Exception e) {
            log.error("Error during token exchange", e);
            throw new RuntimeException("Failed to exchange token", e);
        }
    }

    /**
     * Retrieves the Discord ID from the provided access token by calling the Discord API.
     *
     * @param discordAccessToken The access token received from the authentication service, when user authenticates via Discord and we get the access token.
     * @return The Discord ID of the user.
     * @throws RuntimeException if an error occurs while retrieving the Discord ID.
     */
    public String getDiscordIdFromAccessToken(String discordAccessToken) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + discordAccessToken);

        HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<>(headers);

        ResponseEntity<DiscordUserDto> response = restTemplate.exchange("https://discord.com/api/users/@me", HttpMethod.GET, requestEntity, DiscordUserDto.class);
        log.debug("Discord user response: {}", response);
        log.debug("Discord user status code: {}", response.getStatusCode());
        log.debug("Discord user response body: {}", response.getBody());

        return Objects.requireNonNull(response.getBody()).id();
    }
}